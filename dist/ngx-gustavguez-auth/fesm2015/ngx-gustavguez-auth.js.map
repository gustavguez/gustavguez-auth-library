{"version":3,"file":"ngx-gustavguez-auth.js","sources":["ng://ngx-gustavguez-auth/lib/ngx-gustavguez-access-token.model.ts","ng://ngx-gustavguez-auth/lib/ngx-gustavguez-last-me.model.ts","ng://ngx-gustavguez-auth/lib/ngx-gustavguez-me.model.ts","ng://ngx-gustavguez-auth/lib/ngx-gustavguez-config.model.ts","ng://ngx-gustavguez-auth/lib/ngx-gustavguez-auth.service.ts","ng://ngx-gustavguez-auth/lib/ngx-gustavguez-auth.guard.ts","ng://ngx-gustavguez-auth/lib/ngx-gustavguez-auth.interceptor.ts","ng://ngx-gustavguez-auth/lib/ngx-gustavguez-auth-login/ngx-gustavguez-auth-login.component.ts","ng://ngx-gustavguez-auth/lib/ngx-gustavguez-auth.module.ts","ng://ngx-gustavguez-auth/public-api.ts","ng://ngx-gustavguez-auth/ngx-gustavguez-auth.ts"],"sourcesContent":["export class NgxGustavguezAccessTokenModel {\n\n\tconstructor(\n\t\tpublic token: string,\n\t\tpublic refreshToken: string,\n\t\tpublic expiration: Date) {\n\t}\n}\n","export class NgxGustavguezLastMeModel {\n\n\tconstructor(\n\t\tpublic username?: string,\n\t\tpublic avatar?: string\n\t) { }\n}\n","export class NgxGustavguezMeModel {\n\n\tconstructor(\n\t\tpublic id?: number,\n\t\tpublic username?: string,\n\t\tpublic firstName?: string,\n\t\tpublic lastName?: string,\n\t\tpublic profileImage?: string,\n\t\tpublic data?: any\n\t) { }\n\n\tpublic fromJSON(json: any): void {\n\t\tif (json) {\n\t\t\tthis.id = json.id;\n\t\t\tthis.username = json.username;\n\t\t\tthis.firstName = json.firstName;\n\t\t\tthis.lastName = json.lastName;\n\t\t\tthis.profileImage = json.profileImage;\n\t\t}\n\t}\n}\n","export class NgxGustavguezConfigModel {\n\n\tconstructor(\n\t\tpublic grantType?: string,\n\t\tpublic grantTypeRefresh?: string,\n\t\tpublic clientId?: string,\n\t\tpublic clientSecret?: string,\n\t\tpublic accessTokenLsKey?: string,\n\t\tpublic lastMeAvatarLsKey?: string,\n\t\tpublic lastMeUsernameLsKey?: string,\n\t\tpublic oauthUri?: string,\n\t\tpublic oauthRefreshUri?: string,\n\t\tpublic oauthMeUri?: string\n\t) { }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { LocalStorageService } from 'angular-2-local-storage';\nimport { ApiService, ApiResponseModel } from 'ngx-gustavguez-core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { NgxGustavguezConfigModel } from './ngx-gustavguez-config.model';\nimport { NgxGustavguezAccessTokenModel } from './ngx-gustavguez-access-token.model';\nimport { NgxGustavguezLastMeModel } from './ngx-gustavguez-last-me.model';\nimport { NgxGustavguezMeModel } from './ngx-gustavguez-me.model';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxGustavguezAuthService {\n\n\t// Models\n\tprivate me: NgxGustavguezMeModel;\n\tprivate meJsonResponse: any;\n\tprivate config: NgxGustavguezConfigModel;\n\tprivate lastMe: NgxGustavguezLastMeModel;\n\tprivate accessToken: NgxGustavguezAccessTokenModel;\n\n\t// User session events emitters\n\tprivate onSessionStateChange: EventEmitter<boolean>;\n\tprivate onMeParsed: EventEmitter<any>;\n\tprivate onMeChanged: EventEmitter<NgxGustavguezMeModel>;\n\n\t// Service constructure\n\tconstructor(\n\t\tprivate storageService: LocalStorageService,\n\t\tprivate apiService: ApiService) {\n\t\t// Create event emitters\n\t\tthis.onSessionStateChange = new EventEmitter<boolean>();\n\t\tthis.onMeChanged = new EventEmitter<NgxGustavguezMeModel>();\n\t\tthis.onMeParsed = new EventEmitter<any>();\n\n\t\t// Default values\n\t\tthis.config = new NgxGustavguezConfigModel();\n\t}\n\n\t// Methods\n\tpublic setConfig(config: NgxGustavguezConfigModel): void {\n\t\tthis.config = config;\n\t}\n\n\tpublic getLastMe(): NgxGustavguezLastMeModel {\n\t\treturn this.lastMe;\n\t}\n\n\tpublic getAccessToken(): NgxGustavguezAccessTokenModel {\n\t\treturn this.accessToken;\n\t}\n\n\tpublic getMe(): NgxGustavguezMeModel {\n\t\treturn this.me;\n\t}\n\n\tpublic getMeJsonResponse(): any {\n\t\treturn this.meJsonResponse;\n\t}\n\n\tpublic isLogged(): boolean {\n\t\treturn !!this.me;\n\t}\n\n\tpublic getOnSessionStateChange(): Observable<boolean> {\n\t\treturn this.onSessionStateChange;\n\t}\n\n\tpublic getOnMeChanged(): Observable<NgxGustavguezMeModel> {\n\t\treturn this.onMeChanged;\n\t}\n\n\tpublic getOnMeParsed(): Observable<any> {\n\t\treturn this.onMeParsed;\n\t}\n\n\t// Generate a access token\n\tpublic login(loginUsername: string, loginPassword: string): Observable<boolean> {\n\t\t// Create an observable\n\t\tconst obs = new Observable<boolean>((observer: any) => {\n\t\t\t// Set root strategy\n\t\t\tthis.apiService.changeApiResponseStrategy('root');\n\n\t\t\t// Request token\n\t\t\tthis.apiService.createObj(this.config.oauthUri, {\n\t\t\t\tusername: loginUsername,\n\t\t\t\tpassword: loginPassword,\n\t\t\t\tgrant_type: this.config.grantType,\n\t\t\t\tclient_id: this.config.clientId,\n\t\t\t\tclient_secret: this.config.clientSecret\n\t\t\t}).pipe(\n\t\t\t\tmap((response: ApiResponseModel) => {\n\t\t\t\t\t// Save token to Local storage\n\t\t\t\t\tif (response.data) {\n\t\t\t\t\t\tthis.storageService.set(this.config.accessTokenLsKey, response.data);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Creates the access token model\n\t\t\t\t\treturn this.parseAccessToken(response.data);\n\t\t\t\t})\n\t\t\t).subscribe((response: NgxGustavguezAccessTokenModel) => {\n\t\t\t\t// Load accesstoken\n\t\t\t\tthis.accessToken = response;\n\n\t\t\t\t// Load to apiService to\n\t\t\t\tthis.apiService.setAccessToken(this.accessToken.token);\n\n\t\t\t\t// Check meUrl\n\t\t\t\tif (this.config.oauthMeUri) {\n\t\t\t\t\t// Request me info\n\t\t\t\t\tthis.requestMe().subscribe(\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t// Notify user state\n\t\t\t\t\t\t\tthis.checkAndNotifyMeState();\n\n\t\t\t\t\t\t\t// Restore\n\t\t\t\t\t\t\tthis.apiService.restoreApiResponseStrategy();\n\n\t\t\t\t\t\t\t// Load response\n\t\t\t\t\t\t\tobserver.next(true);\n\t\t\t\t\t\t\tobserver.complete();\n\t\t\t\t\t\t},\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t// Rise error\n\t\t\t\t\t\t\tobserver.error(response);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Restore\n\t\t\t\t\tthis.apiService.restoreApiResponseStrategy();\n\n\t\t\t\t\t// Complete subscribe\n\t\t\t\t\tobserver.next(true);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t}\n\t\t\t}, (response: HttpErrorResponse) => {\n\t\t\t\t// Rise error\n\t\t\t\tobserver.error(response);\n\t\t\t});\n\t\t});\n\t\treturn obs;\n\t}\n\n\t// Generate a access token\n\tpublic requestMe(): Observable<NgxGustavguezMeModel> {\n\t\t// Set root strategy\n\t\tthis.apiService.changeApiResponseStrategy('data');\n\n\t\t// Do request\n\t\treturn this.apiService.fetchData(this.config.oauthMeUri).pipe(\n\t\t\tmap((response: ApiResponseModel) => {\n\t\t\t\t// Load userLogged\n\t\t\t\tthis.me = new NgxGustavguezMeModel();\n\t\t\t\tthis.me.fromJSON(response.data.me);\n\n\t\t\t\t// Load me response\n\t\t\t\tthis.meJsonResponse = response.data;\n\n\t\t\t\t// Emit parsed and changed\n\t\t\t\tthis.onMeParsed.emit(response.data);\n\t\t\t\tthis.onMeChanged.emit(this.me);\n\n\t\t\t\t// Load user logged\n\t\t\t\tthis.lastMe = new NgxGustavguezLastMeModel();\n\t\t\t\tthis.lastMe.avatar = this.me.profileImage;\n\t\t\t\tthis.lastMe.username = this.me.username;\n\n\t\t\t\t// Save to LS\n\t\t\t\tthis.storageService.set(this.config.lastMeAvatarLsKey, this.me.profileImage);\n\t\t\t\tthis.storageService.set(this.config.lastMeUsernameLsKey, this.me.username);\n\n\t\t\t\t// Restore\n\t\t\t\tthis.apiService.restoreApiResponseStrategy();\n\t\t\t\treturn this.me;\n\t\t\t})\n\t\t);\n\t}\n\n\tpublic refreshToken(): Observable<NgxGustavguezAccessTokenModel> {\n\t\t// Get refresh token\n\t\tconst refreshToken: string = this.accessToken instanceof NgxGustavguezAccessTokenModel ? this.accessToken.refreshToken : '';\n\n\t\t// Set root strategy\n\t\tthis.apiService.changeApiResponseStrategy('root');\n\n\t\t// Request token\n\t\treturn this.apiService.createObj(this.config.oauthUri, {\n\t\t\trefresh_token: refreshToken,\n\t\t\tgrant_type: this.config.grantTypeRefresh,\n\t\t\tclient_id: this.config.clientId\n\t\t}).pipe(\n\t\t\tmap((response: ApiResponseModel) => {\n\t\t\t\t// Check response\n\t\t\t\tif (response.data) {\n\t\t\t\t\t// Load the refresh token\n\t\t\t\t\tresponse.data.refresh_token = refreshToken;\n\n\t\t\t\t\t// Save to LS\n\t\t\t\t\tthis.storageService.set(this.config.accessTokenLsKey, response.data);\n\t\t\t\t}\n\n\t\t\t\t// Creates the access token model\n\t\t\t\tthis.accessToken = this.parseAccessToken(response.data);\n\n\t\t\t\t// Load to apiService to\n\t\t\t\tthis.apiService.setAccessToken(this.accessToken.token);\n\n\t\t\t\t// Restore\n\t\t\t\tthis.apiService.restoreApiResponseStrategy();\n\t\t\t\treturn this.accessToken;\n\t\t\t})\n\t\t);\n\t}\n\n\tpublic loadSession(): Observable<boolean> {\n\t\t// Create an observable\n\t\tconst obs = new Observable<boolean>((observer: any) => {\n\t\t\tconst accessTokenLs: any = this.storageService.get(this.config.accessTokenLsKey);\n\t\t\tconst lastMeAvatar: string = this.storageService.get(this.config.lastMeAvatarLsKey);\n\t\t\tconst lastMeUsername: string = this.storageService.get(this.config.lastMeUsernameLsKey);\n\t\t\tconst completeObservable: Function = (result: boolean) => {\n\t\t\t\tobserver.next(result);\n\t\t\t\tobserver.complete();\n\t\t\t};\n\n\t\t\t// Load last user\n\t\t\tif (lastMeUsername || lastMeUsername) {\n\t\t\t\tthis.lastMe = new NgxGustavguezLastMeModel(\n\t\t\t\t\tlastMeUsername,\n\t\t\t\t\tlastMeAvatar\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.lastMe = null;\n\t\t\t}\n\n\t\t\t// Check access token getted from ls\n\t\t\tif (accessTokenLs) {\n\t\t\t\t// Creat access token\n\t\t\t\tthis.accessToken = this.parseAccessToken(accessTokenLs);\n\n\t\t\t\t// Check token\n\t\t\t\tif (this.accessToken instanceof NgxGustavguezAccessTokenModel) {\n\t\t\t\t\t// Has configured me\n\t\t\t\t\tif (this.config.oauthMeUri) {\n\t\t\t\t\t\t// Load to apiService to\n\t\t\t\t\t\tthis.apiService.setAccessToken(this.accessToken.token);\n\n\t\t\t\t\t\t// Request me info\n\t\t\t\t\t\tthis.requestMe().subscribe(\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t// Notify user state\n\t\t\t\t\t\t\t\tthis.checkAndNotifyMeState();\n\n\t\t\t\t\t\t\t\t// Finish load\n\t\t\t\t\t\t\t\tcompleteObservable(true);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t// Finish load\n\t\t\t\t\t\t\t\tcompleteObservable(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Load success without me\n\t\t\t\t\t\tcompleteObservable(true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Finish load\n\t\t\t\t\tcompleteObservable(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Finish load\n\t\t\t\tcompleteObservable(false);\n\t\t\t}\n\t\t});\n\t\treturn obs;\n\t}\n\n\tpublic logout(): void {\n\t\t// Clear Local storage\n\t\tthis.storageService.remove(this.config.accessTokenLsKey);\n\n\t\t// Clear data in memory\n\t\tthis.me = null;\n\t\tthis.accessToken = null;\n\n\t\t// Emit state change\n\t\tthis.checkAndNotifyMeState();\n\t}\n\n\tpublic checkAndNotifyMeState(): void {\n\t\tif (this.me instanceof NgxGustavguezMeModel && this.accessToken instanceof NgxGustavguezAccessTokenModel) {\n\t\t\t// Emit login event\n\t\t\tthis.onSessionStateChange.emit(true);\n\t\t} else {\n\t\t\t// Emit login event\n\t\t\tthis.onSessionStateChange.emit(false);\n\t\t}\n\t}\n\n\tpublic updateMe(me: NgxGustavguezMeModel): void {\n\t\tthis.me = me;\n\n\t\t// Emit change\n\t\tthis.onMeChanged.emit(me);\n\t}\n\n\t// Private methods\n\tprivate parseAccessToken(json: any): NgxGustavguezAccessTokenModel {\n\t\tlet accessToken: NgxGustavguezAccessTokenModel = null;\n\n\t\t// Check access token\n\t\tif (json && json.access_token) {\n\t\t\t// parse expiration date\n\t\t\tconst expiration: Date = new Date();\n\t\t\tconst expiresIn: number = json.expires_in / 60;\n\t\t\texpiration.setMinutes(expiration.getMinutes() + expiresIn);\n\n\t\t\t// Creates the access token model\n\t\t\taccessToken = new NgxGustavguezAccessTokenModel(\n\t\t\t\tjson.access_token,\n\t\t\t\tjson.refresh_token,\n\t\t\t\texpiration\n\t\t\t);\n\t\t}\n\t\treturn accessToken;\n\t}\n}\n","\nimport { CanActivate } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { NgxGustavguezAuthService } from './ngx-gustavguez-auth.service';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxGustavguezAuthGuard implements CanActivate {\n\n\tconstructor(\n\t\tprivate ngxGustavguezAuthService: NgxGustavguezAuthService) { }\n\n\tcanActivate(): boolean {\n\t\t// Active user session?\n\t\tif (this.ngxGustavguezAuthService.isLogged()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Redirect login form\n\t\tthis.ngxGustavguezAuthService.checkAndNotifyMeState();\n\t\treturn false;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport {\n\tHttpEvent,\n\tHttpInterceptor,\n\tHttpHandler,\n\tHttpRequest,\n\tHttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, filter, take, switchMap, finalize } from 'rxjs/operators';\n\nimport { NgxGustavguezAuthService } from './ngx-gustavguez-auth.service';\nimport { NgxGustavguezAccessTokenModel } from './ngx-gustavguez-access-token.model';\n\n@Injectable()\nexport class NgxGustavguezAuthInterceptor implements HttpInterceptor {\n\n\t// Models\n\tprivate isRefreshingToken: boolean = false;\n\tprivate tokenSubject: BehaviorSubject<string> = new BehaviorSubject<string>(null);\n\n\tconstructor(\n\t\tprivate ngxGustavguezAuthService: NgxGustavguezAuthService) { }\n\n\t// Intercep method\n\tpublic intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\t// Pass on the cloned request instead of the original request.\n\t\treturn next.handle(req)\n\t\t\t.pipe(\n\t\t\t\tcatchError((error: any) => {\n\t\t\t\t\t// Check error type\n\t\t\t\t\tif (error instanceof HttpErrorResponse) {\n\t\t\t\t\t\tswitch (error.status) {\n\t\t\t\t\t\tcase 400:\n\t\t\t\t\t\t\treturn this.handle400Error(error);\n\t\t\t\t\t\tcase 401:\n\t\t\t\t\t\t\treturn this.handle401Error(error, req, next);\n\t\t\t\t\t\tcase 403:\n\t\t\t\t\t\t\treturn this.handle403Error(error);\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn throwError(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn new Observable<HttpEvent<any>>();\n\t\t\t\t})\n\t\t\t) as any;\n\t}\n\n\t// Add authorization header to requests\n\tprivate addToken(req: HttpRequest<any>, token: string): HttpRequest<any> {\n\t\treturn req.clone({\n\t\t\tsetHeaders: {\n\t\t\t\tAuthorization: 'Bearer ' + token\n\t\t\t}\n\t\t});\n\t}\n\n\t// Helper function when the refresh token doesnt work\n\tprivate logout(error: string): Observable<any> {\n\t\t// logout users, redirect to login page\n\t\tthis.ngxGustavguezAuthService.logout();\n\t\treturn throwError(error);\n\t}\n\n\t// Handle 403 error\n\tprivate handle403Error(error: HttpErrorResponse): Observable<any> {\n\t\treturn this.logout(error.message);\n\t}\n\n\t// Hanfle 401 error\n\tprivate handle401Error(error: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler): Observable<any> {\n\t\t// @@TODO: find a way to configure it\n\t\t// Ignore 401 status when the url are Oauth\n\t\tif (req.url.includes('/oauth')) {\n\t\t\treturn throwError(error);\n\t\t}\n\n\t\t// Check if is refreshing token\n\t\tif (!this.isRefreshingToken) {\n\t\t\tthis.isRefreshingToken = true;\n\n\t\t\t// Reset here so that the following requests wait until the token\n\t\t\t// comes back from the refreshToken call.\n\t\t\tthis.tokenSubject.next(null);\n\n\t\t\treturn this.ngxGustavguezAuthService.refreshToken()\n\t\t\t\t.pipe(\n\t\t\t\t\tswitchMap((newToken: NgxGustavguezAccessTokenModel) => {\n\t\t\t\t\t\tif (newToken instanceof NgxGustavguezAccessTokenModel) {\n\t\t\t\t\t\t\tthis.tokenSubject.next(newToken.token);\n\t\t\t\t\t\t\treturn next.handle(this.addToken(req, newToken.token));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If we don't get a new token, we are in trouble so logout.\n\t\t\t\t\t\treturn this.logout('Cant get a new token.');\n\t\t\t\t\t}),\n\t\t\t\t\tcatchError((errorCatched: any) => this.logout(errorCatched.message)),\n\t\t\t\t\tfinalize(() => this.isRefreshingToken = false)\n\t\t\t\t);\n\t\t}\n\n\t\t// Take the token and release requests\n\t\treturn this.tokenSubject\n\t\t\t.pipe(\n\t\t\t\tfilter((token: any) => token !== null),\n\t\t\t\ttake(1),\n\t\t\t\tswitchMap((token: any) => next.handle(this.addToken(req, token)))\n\t\t\t);\n\t}\n\n\t// Handle 400 error\n\tprivate handle400Error(error: HttpErrorResponse): Observable<any> {\n\t\tif (error instanceof HttpErrorResponse\n\t\t\t&& error.status === 400\n\t\t\t&& 'error' in error\n\t\t\t&& error.error.error === 'invalid_grant') {\n\t\t\t// If we get a 400 and the error message is 'invalid_grant', the token is no longer valid so logout.\n\t\t\treturn this.logout(error.message);\n\t\t}\n\n\t\t// Normal flow\n\t\treturn throwError(error);\n\t}\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { FormUtility } from 'ngx-gustavguez-core';\nimport { NgxGustavguezAuthService } from '../ngx-gustavguez-auth.service';\nimport { NgxGustavguezLastMeModel } from '../ngx-gustavguez-last-me.model';\n\n@Component({\n\tselector: 'ngx-gustavguez-auth-login',\n\ttemplateUrl: './ngx-gustavguez-auth-login.component.html',\n\tstyleUrls: ['./ngx-gustavguez-auth-login.component.scss']\n})\nexport class NgxGustavguezAuthLoginComponent implements OnInit {\n\t// Inputs\n\t@Input() imageUrl: string;\n\t@Input() usernamePlaceholder: string;\n\t@Input() passwordPlaceholder: string;\n\t@Input() submitText: string;\n\n\t// Outputs\n\t@Output() onSuccess: EventEmitter<void> = new EventEmitter();\n\t@Output() onError: EventEmitter<HttpErrorResponse> = new EventEmitter();\n\n\t// Properties\n\tloading: boolean;\n\tlastAvatar: string;\n\tlastUsername: string;\n\tform: FormGroup;\n\t\n\t// Component constructor\n\tconstructor(\n\t\tprivate ngxGustavguezAuthService: NgxGustavguezAuthService,\n\t\tprivate fb: FormBuilder) { }\n\n\t// Events\n\tngOnInit(): void {\n\t\t// Init loading\n\t\tthis.loading = false;\n\n\t\t// Check last logged avatar\n\t\tif (this.ngxGustavguezAuthService.getLastMe() instanceof NgxGustavguezLastMeModel) {\n\t\t\tconst lastMe: NgxGustavguezLastMeModel = this.ngxGustavguezAuthService.getLastMe();\n\n\t\t\tthis.lastAvatar = this.imageUrl + lastMe.avatar;\n\t\t\tthis.lastUsername = lastMe.username;\n\t\t}\n\n\t\t// Creates the form\n\t\tthis.form = this.fb.group({\n\t\t\tusername: this.fb.control('', [Validators.required]),\n\t\t\tpassword: this.fb.control('', [Validators.required])\n\t\t});\n\n\t\t// Check state\n\t\tif (this.ngxGustavguezAuthService.isLogged()) {\n\t\t\t// Emit success\n\t\t\tthis.onSuccess.emit();\n\t\t\treturn;\n\t\t}\n\n\t\t// Inital clear\n\t\tthis.initForm();\n\t}\n\n\tonSubmit(): void {\n\t\t// Check loading\n\t\tif (this.loading) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check allways form validation\n\t\tif (this.form.valid) {\n\t\t\t// Set loading\n\t\t\tthis.loading = true;\n\n\t\t\t// Submit the form\n\t\t\tthis.ngxGustavguezAuthService\n\t\t\t\t.login(\n\t\t\t\t\tthis.form.value.username,\n\t\t\t\t\tthis.form.value.password\n\t\t\t\t)\n\t\t\t\t.subscribe(\n\t\t\t\t\t(result: boolean) => {\n\t\t\t\t\t\t// Stop loading\n\t\t\t\t\t\tthis.loading = false;\n\n\t\t\t\t\t\t// Check result\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\t// Emit success\n\t\t\t\t\t\t\tthis.onSuccess.emit();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t(error: HttpErrorResponse) => {\n\t\t\t\t\t\t// Stop loading\n\t\t\t\t\t\tthis.loading = false;\n\n\t\t\t\t\t\t// Emit error\n\t\t\t\t\t\tthis.onError.emit(error);\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t} else {\n\t\t\t// Display error\n\t\t\tFormUtility.validateAllFormFields(this.form);\n\t\t}\n\t}\n\n\tonUsernameChange(): void {\n\t\t// Check different\n\t\tif (this.lastUsername !== this.form.value.username) {\n\t\t\tthis.lastAvatar = null;\n\t\t}\n\t}\n\n\tprivate initForm(): void {\n\t\t// Clear form\n\t\tthis.form.reset();\n\n\t\t// Check last username\n\t\tif (this.lastUsername) {\n\t\t\tthis.form.patchValue({\n\t\t\t\tusername: this.lastUsername\n\t\t\t});\n\t\t}\n\n\t\t// Stop loading\n\t\tthis.loading = false;\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LocalStorageModule } from 'angular-2-local-storage';\nimport { NgxGustavguezCoreModule } from 'ngx-gustavguez-core';\n\nimport { NgxGustavguezAuthInterceptor } from './ngx-gustavguez-auth.interceptor';\nimport { NgxGustavguezAuthLoginComponent } from './ngx-gustavguez-auth-login/ngx-gustavguez-auth-login.component';\n\n@NgModule({\n\tdeclarations: [NgxGustavguezAuthLoginComponent],\n\timports: [\n\t\tCommonModule,\n\t\tLocalStorageModule,\n\t\tReactiveFormsModule,\n\t\tNgxGustavguezCoreModule\n\t],\n\tproviders: [\n\t\t{\n\t\t\tprovide: HTTP_INTERCEPTORS,\n\t\t\tuseClass: NgxGustavguezAuthInterceptor,\n\t\t\tmulti: true\n\t\t}\n\t],\n\texports: [NgxGustavguezAuthLoginComponent]\n})\nexport class NgxGustavguezAuthModule { }\n","/*\n * Public API Surface of ngx-gustavguez-auth\n */\n\nexport * from './lib/ngx-gustavguez-access-token.model';\nexport * from './lib/ngx-gustavguez-last-me.model';\nexport * from './lib/ngx-gustavguez-me.model';\nexport * from './lib/ngx-gustavguez-config.model';\n\nexport * from './lib/ngx-gustavguez-auth.guard';\nexport * from './lib/ngx-gustavguez-auth.interceptor';\nexport * from './lib/ngx-gustavguez-auth.service';\nexport * from './lib/ngx-gustavguez-auth.module';\n\nexport * from './lib/ngx-gustavguez-auth-login/ngx-gustavguez-auth-login.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}